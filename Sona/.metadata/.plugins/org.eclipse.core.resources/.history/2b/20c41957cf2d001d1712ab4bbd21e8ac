
/*=========================================================
*Copyright(c) 2022 CyberLogitec
*@FileName : EfinanceClearRestProxy.java
*@FileTitle : EfinanceClearRestProxy
*Open Issues :
*Change history :
*@LastModifyDate : 2022.05.15
*@LastModifier : 
*@LastVersion :
=========================================================*/
package com.clt.jaxrs.sar;

import java.text.DateFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.annotation.security.RolesAllowed;
import javax.ws.rs.Consumes;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import com.clt.apps.opus.stm.sar.servicesio.efinance.EfinanceAPISC;
import com.clt.apps.opus.stm.sar.servicesio.efinance.vo.RestDisputeStatisticVO;
import com.clt.apps.opus.stm.sar.servicesio.efinance.vo.RestDisputeSummaryVO;
import com.clt.apps.opus.stm.sar.servicesio.efinance.vo.RestDisputeVO;
import com.clt.apps.opus.stm.sar.servicesio.efinance.vo.RestEFinanceDisputeVO;
import com.clt.apps.opus.stm.sar.servicesio.efinance.vo.RestEFinanceDisputeVO;
import com.clt.framework.core.layer.event.EventException;
import com.clt.syscommon.common.util.RestfulUtil;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**
 * @author CuongTran
 * @see 
 * @since J2EE 1.6
 *
 */
@Path("/efinance/clear")
public class EfinanceClearRestProxy { 
	protected transient Logger log = Logger.getLogger(getClass().getName());
	private static final String efinanceErrMsg = "Unexpected system error took place during data processing. Please try again later..";
	private static RestEFinanceDisputeVO store = new RestEFinanceDisputeVO();
	/**
	 * getPing
	 * @return javax.ws.rs.core.Response
	 */
	@GET
	@Path("/ping")
	@Produces("text/plain") 
	public String getPing() { 
		return "Call EfinanceClearRestProxy GET ver. 2022-05-17";
	}
	
	/**
	 * Provide data of dispute invoice summary to visualize on Efinance dash-board chart
	 * @param String custCds
	 * @param String frmDt
	 * @param String toDt
	 * @param String dateType
	 * @return javax.ws.rs.core.Response
	 */
	@RolesAllowed("EAI") 
	@GET 
	@Path("/dispute-summary")
	@Consumes(MediaType.APPLICATION_JSON) 
	@Produces(MediaType.TEXT_PLAIN)
	public Response getDisputeSummary( @DefaultValue("") @QueryParam("customerCode") String custCds,
									   @DefaultValue("") @QueryParam("fromDate") String frmDt,
									   @DefaultValue("") @QueryParam("toDate") String toDt,
									   @DefaultValue("") @QueryParam("summaryBy") String dateType){
		
		
		if(StringUtils.isEmpty(custCds)){
			return Response.status(Status.BAD_REQUEST).entity("There is missing 'customerCode'.").build();
		}
		if(StringUtils.isEmpty(frmDt) || StringUtils.isEmpty(toDt)){
			return Response.status(Status.BAD_REQUEST).entity("There is missing 'fromDate' or 'toDate'.").build();
		}
		if(StringUtils.isEmpty(dateType)){
			return Response.status(Status.BAD_REQUEST).entity("There is missing 'summaryBy'.").build();
		} else {
			if (!"disputeDate".equals(dateType) && !"issueDate".equals(dateType)){
				return Response.status(Status.BAD_REQUEST).entity("The 'summaryBy' must be 'disputeDate' or 'issueDate'.").build();
			}
		}
		EfinanceAPISC sc = new EfinanceAPISC(); 
		Map<String, Object> contents = new HashMap<String, Object>();
		List<RestDisputeSummaryVO> list = new ArrayList<RestDisputeSummaryVO>();
		RestDisputeVO restVo = new RestDisputeVO();
		int startMonth = 0;
		int endMonth = 11;
		try {
			Date fromDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS").parse(frmDt.trim()+" 00:00:00:000");
			Date toDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss:SSS").parse(toDt.trim()+" 23:59:59:999");
			Calendar cal1 = Calendar.getInstance();
			cal1.setTime(fromDate);
			Calendar cal2 = Calendar.getInstance();
			cal2.setTime(toDate);
			if(cal1.get(Calendar.YEAR) != cal2.get(Calendar.YEAR)){
				return Response.status(Status.BAD_REQUEST).entity("'fromDate' and 'toDate' must be within a year.").build();
			}
			if(fromDate.after(toDate)){
				return Response.status(Status.BAD_REQUEST).entity("The 'fromDate' must be less than 'toDate'.").build();
			}
			startMonth = cal1.get(Calendar.MONTH);
			endMonth = cal2.get(Calendar.MONTH);
			restVo.setCustCd(custCds);
			restVo.setFrmDt(frmDt);
			restVo.setToDt(toDt); 
			restVo.setDateType(dateType);
			list = sc.searchDisputeSummary(restVo);
		} catch (ParseException e1) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(getErrorMessage(e1.getMessage())).build();
		} catch (EventException e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(getErrorMessage(e.getMessage())).build();
		}
		contents.put("items",makeResponseForSummary(list,startMonth,endMonth));
		return Response.status(Status.OK).entity(RestfulUtil.JsonFromCustomVo(contents)).build();
	}
	
	/**
	 * Provide data of recent invoice statistics to visualize on Efinance dash-board chart
	 * 
	 * @param String custCd
	 * @return javax.ws.rs.core.Response
	 */
	@RolesAllowed("EAI") 
	@GET 
	@Path("/dispute-statistics")
	@Consumes(MediaType.APPLICATION_JSON) 
	@Produces(MediaType.TEXT_PLAIN)
	public Response getDisputeStatistic( @DefaultValue("") @QueryParam("customerCode") String custCd){
		if(StringUtils.isEmpty(custCd)){
			return Response.status(Status.BAD_REQUEST).entity("There is missing 'customerCode'.").build();
		}
		EfinanceAPISC sc = new EfinanceAPISC(); 
		Map<String, Object> contents = new HashMap<String, Object>();
		List<RestDisputeStatisticVO> list = new ArrayList<RestDisputeStatisticVO>();
		RestDisputeVO restVo = new RestDisputeVO();
		try {
			restVo.setCustCd(custCd);
			list = sc.searchDisputeStatistic(restVo);
		} catch (EventException e) {
			// TODO Auto-generated catch block
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(getErrorMessage(e.getMessage())).build();
		}
		contents = makeResponseForSatistics(list);
		return Response.status(Status.OK).entity(RestfulUtil.JsonFromCustomVo(contents)).build();
	}
	
	/**
	 * Allow user can raise dispute for invoice to system
	 * 
	 * @param jsonData
	 * @return javax.ws.rs.core.Response
	 */
	@RolesAllowed("EAI")
	@POST
	@Path("/raise-dispute")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response raiseDispute(String jsonData){
		RestEFinanceDisputeVO vo = (RestEFinanceDisputeVO) RestfulUtil.JsonToVO(jsonData, RestEFinanceDisputeVO.class);
		//1.Customer code
		System.out.println("- Customer Code: "+vo.getCustomerCode());
		store.setCustomerCode(vo.getCustomerCode());
		//2.Invoice items
		List<RestEFinanceDisputeVO> invoiceItems = vo.getInvoiceItems();
		for (RestEFinanceDisputeVO invoiceItem : invoiceItems) {
			//2.1 get defaul disspute group name from lookup when create dispute from this API (RAISE DISPUTE FOR EFINANCE ?)
			//2.2 check invoice no.
			System.out.println("\t - invoice No: "+invoiceItem.getInvoiceNo());
			store.setInvoiceNo(invoiceItem.getInvoiceNo());
			//2.3 check dispute reason 
			System.out.println("\t - dispute Reason: "+invoiceItem.getDisputeReason());
			store.setDisputeReason(invoiceItem.getDisputeReason());
			//2.4 check sub-reason
			System.out.println("\t - dispute Sub Reason: "+invoiceItem.getDisputeSubReason());
			store.setDisputeSubReason(invoiceItem.getDisputeSubReason());
			//2.5 dispute remark -> remark
			System.out.println("\t - dispute Remark: "+invoiceItem.getDisputeRemark());
			store.setDisputeRemark(invoiceItem.getDisputeRemark());
			//2.6 get BL no. from customer and invoice No.(Should use SAR_OTS_HDR/DTL)
			//2.6.1 check this bl/inv have dispute or not ? -> return message if dispute is exist. check dispute no in SAR_OTS_HDR ?
			//2.7 Get attachments
			List<RestEFinanceDisputeVO> attachments = invoiceItem.getAttachments();
			String attachmentStr  = getJsonStringFromVo(attachments);
			store.setAttachmentJson(attachmentStr);
			System.out.println("\t - Attachment: "+attachmentStr);
			// 2.8 Get otherInfo
			List<RestEFinanceDisputeVO> otherInfos = invoiceItem.getOtherInfo();
			String otherInfoStr  =getJsonStringFromVo(otherInfos);
			store.setOtherInfoJson(otherInfoStr);
			System.out.println("\t - otherInfo: "+otherInfoStr);
			// 2.9 chargeItems 
			List<RestEFinanceDisputeVO> chargeItems = invoiceItem.getChargeItems();
			String chargeItemsStr = getJsonStringFromVo(chargeItems);
			store.setChargeItemJson(chargeItemsStr);
			System.out.println("\t - chargeItems:"+chargeItemsStr);
		}
		return Response.status(Status.OK).entity("").build();
	}
	
	/**
	 * Provide detail of disputed
	 * 
	 * @param String custCd
	 * @param String disputeNo
	 * @return javax.ws.rs.core.Response
	 */
	@RolesAllowed("EAI")
	@GET
	@Path("/dispute-detail")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response getDisputeDetail( @DefaultValue("") @QueryParam("customerCode") String custCd,
			 					  @DefaultValue("") @QueryParam("disputeNo") String disputeNo){
		if(StringUtils.isEmpty(custCd)){
			return Response.status(Status.BAD_REQUEST).entity("There is missing 'customerCode'").build();
		}
		if(StringUtils.isEmpty(disputeNo)){
			return Response.status(Status.BAD_REQUEST).entity("There is missing 'disputeNo'").build();
		}
		
		EfinanceAPISC sc = new EfinanceAPISC();
		RestEFinanceDisputeVO vo = new RestEFinanceDisputeVO();
		vo.setCustomerCode(custCd);
		vo.setDisputeNo(disputeNo);
		List<RestEFinanceDisputeVO> list;
		try {
			list = sc.searchDisputeDetail(vo);
		} catch (EventException e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(getErrorMessage(e.getMessage())).build();
		}
		RestEFinanceDisputeVO customVo = new RestEFinanceDisputeVO();
		if(list.size() > 0) {
			vo = list.get(0);
			// Convert Json data to VO
			RestEFinanceDisputeVO attachment = (RestEFinanceDisputeVO) RestfulUtil.JsonToVO(addKeyForJsonArray(vo.getAttachmentJson(),"attachments"), RestEFinanceDisputeVO.class);
			RestEFinanceDisputeVO otherInfo = (RestEFinanceDisputeVO) RestfulUtil.JsonToVO(addKeyForJsonArray(vo.getOtherInfoJson(),"otherInfo"), RestEFinanceDisputeVO.class);
			RestEFinanceDisputeVO chargeItem = (RestEFinanceDisputeVO) RestfulUtil.JsonToVO(addKeyForJsonArray(vo.getChargeItemJson(),"chargeItems"), RestEFinanceDisputeVO.class);
			// Make Json By VO
			System.out.println(attachment);
			customVo.setDisputeRemark(vo.getDisputeRemark());
			customVo.setAttachments(attachment.getAttachments());
			customVo.setOtherInfo(otherInfo.getOtherInfo());
			customVo.setChargeItems(chargeItem.getChargeItems());
		}
		return Response.status(Status.OK).entity(RestfulUtil.JsonFromCustomVo(customVo)).build();
	}	
	
	
	/**
	 * Provide list list of disputed which user raised before
	 * 
	 * @param String custCd
	 * @param String offset
	 * @param String limit
	 * @param String searchKeyword
	 * @param String disputeReason
	 * @param String disputeSubReason
	 * @param String registerDateFrom
	 * @param String registerDateTo
	 * @param String status
	 * @param String disputedBy
	 * @param String orderBy
	 * @return javax.ws.rs.core.Response
	 */
	@RolesAllowed("EAI")
	@GET
	@Path("/disputes")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response getDisputes( @DefaultValue("") @QueryParam("customerCode") String custCd,
			 					 @DefaultValue("") @QueryParam("offset") String offset,
			 					 @DefaultValue("") @QueryParam("limit") String limit,
			 					 @DefaultValue("") @QueryParam("searchKeyword") String searchKeyword,
			 					 @DefaultValue("") @QueryParam("disputeReason") String disputeReason,
			 					 @DefaultValue("") @QueryParam("disputeSubReason") String disputeSubReason,
			 					 @DefaultValue("") @QueryParam("registerDateFrom") String registerDateFrom,
			 					 @DefaultValue("") @QueryParam("registerDateTo") String registerDateTo,
			 					 @DefaultValue("") @QueryParam("status") String status,
			 					 @DefaultValue("") @QueryParam("disputedBy") String disputedBy,
			 					 @DefaultValue("registerDate") @QueryParam("orderBy") String orderBy
			 					){
		if(StringUtils.isEmpty(custCd)){
			return Response.status(Status.BAD_REQUEST).entity("There is missing 'customerCode'").build();
		}
		if(StringUtils.isEmpty(offset)){
			return Response.status(Status.BAD_REQUEST).entity("There is missing 'offset'").build();
		} else if(!StringUtils.isNumeric(offset)){
			return Response.status(Status.BAD_REQUEST).entity("Please enter the number for 'offset'").build();
		}
		if(StringUtils.isEmpty(limit)){
			return Response.status(Status.BAD_REQUEST).entity("There is missing 'limit'").build();
		} else if(!StringUtils.isNumeric(limit)){
			return Response.status(Status.BAD_REQUEST).entity("Please enter the number for 'limmit'").build();
		}
		EfinanceAPISC sc = new EfinanceAPISC();
		Map<String, Object> result = new HashMap<String, Object>();
		RestEFinanceDisputeVO restVo = new RestEFinanceDisputeVO();
		restVo.setLimit(limit);
		restVo.setCustomerCode(custCd);
		restVo.setOffset(offset);
		restVo.setFoundKeywordStr(searchKeyword);
		restVo.setDisputeReason(disputeReason);
		restVo.setDisputeSubReason(disputeSubReason);
		restVo.setDisputeStatus(status);
		restVo.setRegisterFrm(registerDateFrom);
		restVo.setRegisterTo(registerDateTo);
		restVo.setDisputeBy(disputedBy);
		restVo.setOrderBy(orderBy);
		List<RestEFinanceDisputeVO> list = null;
		try {
			list = sc.searchDisputeList(restVo);
		} catch (EventException e) {
			return Response.status(Status.INTERNAL_SERVER_ERROR).entity(getErrorMessage(e.getMessage())).build();
		}
		if(list != null && list.size() > 0){
			RestEFinanceDisputeVO tempVo = list.get(0);
			String[] array = tempVo.getFoundKeywordStr().split(",");
			JSONObject json =  new JSONObject();
			json.put("offset", offset);
			json.put("limit", limit);
			json.put("total", tempVo.getTotalRecord());
			
			if(!(array.length == 1 && StringUtils.isEmpty(array[0]))){
				result.put("foundKeyword",array);
			}
			result.put("items", list);
			result.put("pagination",json);	
		}
		String rawjson = RestfulUtil.JsonFromCustomVo(result);
		return Response.status(Status.OK).entity(correctFormatJsonByVo(rawjson, RestEFinanceDisputeVO.class)).build();
	}
	
	
	/**
	 * Convert json to json string by list
	 * @param List<RestEFinanceDisputeVO> list
	 * @return String
	 */
	private String getJsonStringFromVo(List<RestEFinanceDisputeVO> list) {
		Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
		return gson.toJson(list);
	}
	
	/**
	 * add key for json arry
	 * 
	 * @param String json
	 * @param String key
	 * @return String
	 */
	private String addKeyForJsonArray(String json, String key) {
		StringBuffer builder = new StringBuffer();
		builder.append("{").append("\"").append(key).append("\":")
				.append(json).append("}");
		return builder.toString();
	}
	
	/**
	 * correctFormatJsonByVo
	 * 
	 * @param String json
	 * @param Class<?> clazz
	 * @return String
	 */
	private String correctFormatJsonByVo(String json, Class<?> clazz){
		Object vo = RestfulUtil.JsonToVO(json, clazz);
		return RestfulUtil.JsonFromCustomVo(vo);
	}
	
	/**
	 * Make json data
	 * 
	 * @param List<RestDisputeStatisticVO> list
	 * @return Map<String, Object>
	 */
	private Map<String, Object> makeResponseForSatistics(List<RestDisputeStatisticVO> list){
		Map<String, Object> result = new HashMap<String, Object>();
		List<RestDisputeStatisticVO> listDisputeSatisticsVOs = new ArrayList<RestDisputeStatisticVO>();
		for (RestDisputeStatisticVO vo : list) {
			String invType = vo.getDisputeStatus();
			String totalInv = vo.getTotalInvoices();
			RestDisputeStatisticVO obj = checkDisputeSts(listDisputeSatisticsVOs, invType);
			if(obj != null){
				List<RestDisputeStatisticVO> subItems = obj.getAmounts();
				RestDisputeStatisticVO subItem = new RestDisputeStatisticVO();
				int firstInvTotal = Integer.valueOf(obj.getTotalInvoices());
				int secondInvTotal =  Integer.valueOf(totalInv) + firstInvTotal;
				obj.setTotalInvoices(String.valueOf(secondInvTotal));
				subItem.setCurrency(vo.getCurrency());
				subItem.setAmount(vo.getAmount());
				subItems.add(subItem);
			} else {
				List<RestDisputeStatisticVO> subItems = new ArrayList<RestDisputeStatisticVO>();
				RestDisputeStatisticVO mainItem = new RestDisputeStatisticVO();
				RestDisputeStatisticVO subItem = new RestDisputeStatisticVO();
				// Main
				mainItem.setDisputeStatus(invType);
				mainItem.setTotalInvoices(totalInv);
				// Sub
				subItem.setCurrency(vo.getCurrency());
				subItem.setAmount(vo.getAmount());
				subItems.add(subItem);
				// Add to result
				mainItem.setAmounts(subItems);
				listDisputeSatisticsVOs.add(mainItem);
			}
			
		}
		result.put("items", listDisputeSatisticsVOs);
		return result;
	}
	
	/**
	 * check item exists in List
	 * 
	 * @param List<RestDisputeStatisticVO> list
	 * @param String status
	 * @return RestDisputeStatisticVO
	 */
	private RestDisputeStatisticVO checkDisputeSts(List<RestDisputeStatisticVO> list, String status){
		for (RestDisputeStatisticVO vo : list) {
			if(status.equals(vo.getDisputeStatus())){
				return vo;
			}
		}
		return null;
	}
	
	/**
	 * Create empty data for the month don't have data
	 * 
	 * @param List<RestDisputeSummaryVO> list
	 * @return List<RestDisputeSummaryVO>
	 */
	private List<RestDisputeSummaryVO> makeResponseForSummary(List<RestDisputeSummaryVO> list, int startMonth, int endMonth) {
		String[] array = new DateFormatSymbols(Locale.US).getMonths();
		List<String> months = new ArrayList<String>();
		List<String> monthInVo = new ArrayList<String>();
		List<RestDisputeSummaryVO> result = new ArrayList<RestDisputeSummaryVO>();
		// check empty in array
		for (String item : array) {
			if(!StringUtils.isEmpty(item)){
				months.add(item.substring(0,3));
			}
		}
		// add month from VOs to list
		for (RestDisputeSummaryVO vo : list) {
			monthInVo.add(vo.getDisplayMonth());
		}
		
		// check data exist
		for (String month : months) {
			int indexMonth = months.indexOf(month);
			if(indexMonth < startMonth || indexMonth > endMonth) continue;
			if(!monthInVo.contains(month)){
				RestDisputeSummaryVO addNew = new RestDisputeSummaryVO(month,"0","0","0");
				result.add(addNew);
			} else {
				RestDisputeSummaryVO data =  list.get(monthInVo.indexOf(month));
				if(month.equals(data.getDisplayMonth())){
					result.add(data);
				}
			}
		}
		return result;
	}
	/**
	 * Get error message in message of EventException
	 * 
	 * @param String msg
	 * @return String
	 */
	private String getErrorMessage(String msg){
		if(StringUtils.isEmpty(msg)) return efinanceErrMsg;
		String[] errMsgs =  msg.split("<\\|\\|>");
		String result = efinanceErrMsg;
		if(!StringUtils.isEmpty(errMsgs[0])){
			result = errMsgs[0];
		}
		return result;
	}
}