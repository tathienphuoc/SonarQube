/*=========================================================
*Copyright(c) 2022 CyberLogitec
*@FileName : ClassCommentUtils.java
*@FileTitle : ClassCommentUtils
*Open Issues :
*Change history :
*@LastModifyDate : 2022.08.11
*@LastModifier : 
*@LastVersion : 1.0
* 2022.08.11
* 1.0 Creation
=========================================================*/
package org.sonar.samples.java.utils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.List;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.sonar.plugins.java.api.JavaFileScannerContext;
import org.sonar.plugins.java.api.tree.ClassTree;
import org.sonar.plugins.java.api.tree.MethodTree;
import org.sonar.plugins.java.api.tree.SyntaxTrivia;
import org.sonar.samples.java.utils.MethodCommentUtils.Type;

/**
 * Utility Class Comment
 * 
 * @author tathienphuoc
 * @see ClassCommentUtils
 * @since J2EE 1.6
 */
public class ClassCommentUtils {
	private static EnumMap<Type, ArrayList<String>> classComments = new EnumMap<>(Type.class);
	public static HashMap<String, Integer> errMsgs = new HashMap<>();
	public static String prefix = "";
	private enum Type {
		
		DESCRIPTION, EMPTY_LINE, AUTHOR, SEE, SEEN, OTHER, EMPTY_LINE_WITHOUT_ASTERISK, INVALID_LINE_FORMAT,
		INVALID_AUTHOR_FORMAT, INVALID_DESCRIPTION_FORMAT;

		private String errMsg = "";

		static {

			EMPTY_LINE.errMsg = CommonMessage_bk.REMOVE_EMPTY_LINE;
			EMPTY_LINE_WITHOUT_ASTERISK.errMsg = CommonMessage_bk.REMOVE_EMPTY_LINE_WITHOUT_ASTERISK;
			INVALID_LINE_FORMAT.errMsg = CommonMessage_bk.INVALID_LINE_FORMAT;
			INVALID_AUTHOR_FORMAT.errMsg = CommonMessage_bk.INVALID_AUTHOR_FORMAT;
			INVALID_DESCRIPTION_FORMAT.errMsg = CommonMessage_bk.INVALID_DESCRIPTION_FORMAT;
		}


		/**
		 * Get Type of string
		 * 
		 * @param String line
		 * @return Type
		 */
		public static Type getType(String line) {// line==null is necessary?
			int size = line.length();
			if (size == 0) {// line==null is necessary?
				return EMPTY_LINE_WITHOUT_ASTERISK;
			} else if (size == 1 && line.charAt(0) == '*') {// *
				return EMPTY_LINE;
			} else {// size >1
				if (line.charAt(1) != ' ' || Pattern.compile("\\*\\s{2,}@").matcher(line).find()) {// *@param
					// ---------
					line = line.substring(1).trim();
					if (line.charAt(0) != '@') {// des
						classComments.get(DESCRIPTION).add(line);
					} else if (line.startsWith("@param ")) {
						classComments.get(PARAM).add(line);
					} else if (line.startsWith("@return ")) {
						classComments.get(RETURN).add(line);
					} else if (line.startsWith("@throws ") || line.startsWith("@exception ")) {
						classComments.get(EXCEPTION).add(line);
					}
					return INVALID_LINE_FORMAT;
				} else if (Pattern.compile("^\\*\\s+[^@][a-zA-Z0-9]*.*$").matcher(line).find()) {
					return line.endsWith("<br>") ? DESCRIPTION : INVALID_DESCRIPTION_FORMAT;
				} else if (line.startsWith("* @param ")) {
					return validFormat(line, PARAM) ? PARAM : INVALID_PARAM_FORMAT;
				} else if (line.startsWith("* @return ")) {// tuong tu nha @param
					return validFormat(line, RETURN) ? RETURN : INVALID_RETURN_FORMAT;
				} else if (line.startsWith("* @throws ") || line.startsWith("* @exception ")) {
					if (line.split("\\s+").length == 3) {
						return EXCEPTION;
					} else {
						return INVALID_EXCEPTION_FORMAT;
					}
				}
			}
			return OTHER;
		}
	}


	/**
	 * Initialize class comments variable
	 * 
	 */
	private static void initClassComments() {
		for (Type t : Type.values()) {
			classComments.put(t, new ArrayList<>());
		}
	}

	/**
	 * Check if method comment allows empty line or not
	 * 
	 * @return boolean
	 */
	private static boolean allowEmptyLine() {
		return classComments.get(Type.AUTHOR).isEmpty() && classComments.get(Type.SEE).isEmpty()
				&& classComments.get(Type.SINCE).isEmpty();
	}

	/**
	 * Get class comments
	 * 
	 * @param ClassTree tree
	 * @return String
	 * @throws Exception
	 */
	private static String getClassComments(ClassTree tree) throws Exception {
		List<SyntaxTrivia> classComments = tree.firstToken().trivias();
		if (classComments.isEmpty()) {
			throw new Exception(CommonMessage_bk.CLASS_ABSENT_COMMENTS);
		} else if (classComments.size() > 1) {
			throw new Exception(CommonMessage_bk.CLASS_TOO_MANY_COMMENTS);
		} else {
			String methodComment = classComments.get(0).comment();
			if (methodComment.startsWith("/**") && methodComment.endsWith("*/") && methodComment.length() > 4) {
				return methodComment;
			}
			throw new Exception(CommonMessage_bk.CLASS_INVALID_COMMENTS_FORMAT);
		}
	}

	/**
	 * Check order of lines in comments
	 * 
	 * @param Type type
	 * @return boolean
	 */
	private static boolean isOrderedLine(Type type) {
		switch (type) {
		case DESCRIPTION:
			return allowEmptyLine();
		case AUTHOR:
			return classComments.get(Type.SEE).isEmpty() && classComments.get(Type.SINCE).isEmpty();
		case SEE:
			return classComments.get(Type.SINCE).isEmpty();
		default:
			return true;
		}
	}

	/**
	 * Get error messages of format in comments 
	 * 
	 * @param ClassTree tree
	 * @return List<String>
	 */
	public static List<String> getFormatErrMsgs(ClassTree tree) {
		initClassComments();
		List<String> commentLines;
		try {
			commentLines = cleanLines(getClassComments(tree));
		} catch (Exception e) {
			return Arrays.asList(e.getMessage());
		}
		List<String> errMsgs = new ArrayList<>();
		for (int i = 0; i < commentLines.size(); i++) {
			Type type = Type.getType(commentLines.get(i));
			classComments.get(type).add(commentLines.get(i));
			if (type.equals(Type.EMPTY_LINE)) {
				if (!allowEmptyLine()) {
					errMsgs.add(type.errMsg);
				}
			} else {
				if (!type.errMsg.isEmpty()) {
					errMsgs.add(type.errMsg);
				}
				if (!isOrderedLine(type)) {
					errMsgs.add(CommonMessage_bk.CLASS_INVALID_ORDER_FORMAT);
				}
			}
		}
		return errMsgs;
	}

	/**
	 * Get error messages of invalid comments 
	 * 
	 * @param ClassTree tree
	 * @return List<String>
	 */
	public static List<String> getDocErrMsgs(ClassTree tree) {
		List<String> errMsgs = new ArrayList<>(getFormatErrMsgs(tree));
		if (!errMsgs.isEmpty()) {
			return errMsgs;
		}
		if (classComments.get(Type.DESCRIPTION).isEmpty()) {
			errMsgs.add(0, CommonMessage_bk.CLASS_ABSENT_DESCRIPTION);
		} else if (classComments.get(Type.EMPTY_LINE).isEmpty()) {
			errMsgs.add(0, CommonMessage_bk.CLASS_ABSENT_EMPTY_LINE);
		}
		if (classComments.get(Type.AUTHOR).isEmpty()) {
			errMsgs.add(CommonMessage_bk.CLASS_ABSENT_AUTHOR);
		} else if (classComments.get(Type.AUTHOR).size() > 1) {
			errMsgs.add(CommonMessage_bk.CLASS_TOO_MANY_AUTHOR);
		}
		if (classComments.get(Type.SEE).isEmpty()) {
			errMsgs.add(CommonMessage_bk.CLASS_ABSENT_SEE);
		} else if (classComments.get(Type.SEE).size() > 1) {
			errMsgs.add(CommonMessage_bk.CLASS_TOO_MANY_SEE);
		}
		if (classComments.get(Type.SINCE).isEmpty()) {
			errMsgs.add(CommonMessage_bk.CLASS_ABSENT_SINCE);
		} else if (classComments.get(Type.SINCE).size() > 1) {
			errMsgs.add(CommonMessage_bk.CLASS_TOO_MANY_SINCE);
		}

		return errMsgs;
	}
	/**
	 * Remove unwanted characters in comments and return lines of comment<br/>
	 * 
	 * @param String javadoc
	 * @return List<String>
	 */
	private static List<String> cleanLines(String javadoc) {
		String trimmedJavadoc = javadoc.trim();
		String[] lines = trimmedJavadoc.substring(3, trimmedJavadoc.length() - 2).trim().split("\\r?\\n");
		return Arrays.stream(lines).map(String::trim).collect(Collectors.toList());
	}

}